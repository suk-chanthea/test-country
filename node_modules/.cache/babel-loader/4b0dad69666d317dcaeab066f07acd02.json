{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\NodeJS\\\\test-country\\\\src\\\\components\\\\Pagination\\\\Pagination.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Table from '../Table/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Pagination(_ref) {\n  _s();\n\n  let {\n    itemsPerPage,\n    items\n  } = _ref;\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      items: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Pagination, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c = Pagination;\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["useState","useEffect","ReactPaginate","Table","Pagination","itemsPerPage","items","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","console","log","slice","Math","ceil","length","handlePageClick","event","newOffset","selected"],"sources":["C:/Users/ACER/Desktop/NodeJS/test-country/src/components/Pagination/Pagination.jsx"],"sourcesContent":["import {useState, useEffect} from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport Table from '../Table/Table';\r\nfunction Pagination({ itemsPerPage,items }) {\r\n    // We start with an empty list of items.\r\n    const [currentItems, setCurrentItems] = useState(null);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    // Here we use item offsets; we could also use page offsets\r\n    // following the API or data you're working with.\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n  \r\n    useEffect(() => {\r\n      // Fetch items from another resources.\r\n      const endOffset = itemOffset + itemsPerPage;\r\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n      setCurrentItems(items.slice(itemOffset, endOffset));\r\n      setPageCount(Math.ceil(items.length / itemsPerPage));\r\n    }, [itemOffset, itemsPerPage]);\r\n  \r\n    // Invoke when user click to request another page.\r\n    const handlePageClick = (event) => {\r\n      const newOffset = (event.selected * itemsPerPage) % items.length;\r\n      console.log(\r\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n      );\r\n      setItemOffset(newOffset);\r\n    };\r\n  \r\n    return (\r\n      <>\r\n        <Table items={currentItems} />\r\n        <ReactPaginate\r\n          breakLabel=\"...\"\r\n          nextLabel=\"next >\"\r\n          onPageChange={handlePageClick}\r\n          pageRangeDisplayed={5}\r\n          pageCount={pageCount}\r\n          previousLabel=\"< previous\"\r\n          renderOnZeroPageCount={null}\r\n        />\r\n      </>\r\n\r\n    );\r\n  }\r\nexport default Pagination;"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;;;AACA,SAASC,UAAT,OAA4C;EAAA;;EAAA,IAAxB;IAAEC,YAAF;IAAeC;EAAf,CAAwB;EACxC;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;EACA,MAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,CAAD,CAA1C,CAHwC,CAIxC;EACA;;EACA,MAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,CAAD,CAA5C;EAEAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,SAAS,GAAGF,UAAU,GAAGN,YAA/B;IACAS,OAAO,CAACC,GAAR,CAAa,sBAAqBJ,UAAW,OAAME,SAAU,EAA7D;IACAL,eAAe,CAACF,KAAK,CAACU,KAAN,CAAYL,UAAZ,EAAwBE,SAAxB,CAAD,CAAf;IACAH,YAAY,CAACO,IAAI,CAACC,IAAL,CAAUZ,KAAK,CAACa,MAAN,GAAed,YAAzB,CAAD,CAAZ;EACD,CANQ,EAMN,CAACM,UAAD,EAAaN,YAAb,CANM,CAAT,CARwC,CAgBxC;;EACA,MAAMe,eAAe,GAAIC,KAAD,IAAW;IACjC,MAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBlB,YAAlB,GAAkCC,KAAK,CAACa,MAA1D;IACAL,OAAO,CAACC,GAAR,CACG,8BAA6BM,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAD7E;IAGAV,aAAa,CAACU,SAAD,CAAb;EACD,CAND;;EAQA,oBACE;IAAA,wBACE,QAAC,KAAD;MAAO,KAAK,EAAEf;IAAd;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,aAAD;MACE,UAAU,EAAC,KADb;MAEE,SAAS,EAAC,QAFZ;MAGE,YAAY,EAAEa,eAHhB;MAIE,kBAAkB,EAAE,CAJtB;MAKE,SAAS,EAAEX,SALb;MAME,aAAa,EAAC,YANhB;MAOE,qBAAqB,EAAE;IAPzB;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAeD;;GAxCML,U;;KAAAA,U;AAyCT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}